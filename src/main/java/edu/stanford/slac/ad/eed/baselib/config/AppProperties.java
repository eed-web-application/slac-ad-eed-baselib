package edu.stanford.slac.ad.eed.baselib.config;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import edu.stanford.slac.ad.eed.baselib.api.v1.dto.NewAuthenticationTokenDTO;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Log4j2
@Getter
@Setter
@ConfigurationProperties(prefix = "edu.stanford.slac.ad.eed.baselib")
public class AppProperties {
    @Value("${spring.application.name}")
    private String appName;
    private String appTokenJwtKey;
    private String dbAdminUri;
    private String userHeaderName;
    private String oauthServerDiscover;
    private List<String> rootUserList = new ArrayList<>();
    private List<String> authorizedServiceInternalToken = new ArrayList<>();
    private List<NewAuthenticationTokenDTO> rootAuthenticationTokenList = new ArrayList<>();
    private String rootAuthenticationTokenListJson = "[]";
    // all email that belong to this domain belongs to application toke authorization
    private final String authenticationTokenDomain = "slac.app$";
    private final String applicationEmailRegex = ".*@%s";

    @PostConstruct
    public void init() {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            rootAuthenticationTokenList = objectMapper.readValue(rootAuthenticationTokenListJson, new TypeReference<>() {
            });
        } catch (JsonProcessingException e) {
            log.error(e.getMessage());
        }
    }

    /**
     * Return the application token domain regex on the form
     * of ".*@{appTokenPrefix}\.slac\.app\$"
     * @return the application domain
     */
    public String getAppTokenRegex() {
        var addDomain = getAppEmailPostfix();
        addDomain = addDomain.replace(".", "\\."); // escape the dot
        addDomain = addDomain.replace("$", "\\$"); // escape the dollar sign
        return applicationEmailRegex.formatted(addDomain);
    }

    public String getAppEmailPostfix() {
        return "%s.%s".formatted(appName, authenticationTokenDomain);
    }

    /**
     * Check if the email belong to an authentication token instead of
     * real user
     *
     * @param email is the email to check
     * @return true is the email belong to autogenerated application token email
     */
    public boolean isAuthenticationToken(String email) {
        if (email == null) return false;
        return email.endsWith(getAuthenticationTokenDomain());
    }

    /**
     * Check if the email ends with the application specific application fake domain without the
     *
     * @param email is the email to check
     * @return true is the email belong to autogenerated application token email
     */
    public boolean isAppTokenEmail(String email) {
        final Pattern pattern = Pattern.compile(getAppTokenRegex(), Pattern.MULTILINE);
        final Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }
}
