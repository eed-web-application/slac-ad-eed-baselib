package edu.stanford.slac.ad.eed.baselib.service;

import edu.stanford.slac.ad.eed.baselib.api.v1.dto.AuthenticationTokenDTO;
import edu.stanford.slac.ad.eed.baselib.api.v1.dto.AuthorizationDTO;
import edu.stanford.slac.ad.eed.baselib.api.v1.dto.AuthorizationTypeDTO;
import edu.stanford.slac.ad.eed.baselib.api.v1.dto.NewAuthenticationTokenDTO;
import edu.stanford.slac.ad.eed.baselib.config.AppProperties;
import edu.stanford.slac.ad.eed.baselib.model.AuthenticationToken;
import lombok.AllArgsConstructor;

import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@AllArgsConstructor
public abstract class AuthServiceAbstractInterface {
    private final AppProperties appProperties;
    abstract void deleteAuthorizationForResourcePrefix(String resourcePrefix);

    abstract void deleteAuthorizationForResource(String resource);

    abstract List<AuthorizationDTO> getAllAuthorizationForOwnerAndAndAuthTypeAndResourcePrefix(String owner, AuthorizationTypeDTO authorizationType, String resourcePrefix, Optional<Boolean> allHigherAuthOnSameResource);

    abstract void updateRootUser();

    abstract void updateAutoManagedRootToken();

    abstract void addRootAuthorization(String email, String creator);

    abstract void removeRootAuthorization(String email);

    abstract List<AuthorizationDTO> findAllRootUser();

    abstract String ensureAuthenticationToken(AuthenticationToken authenticationToken);

    abstract AuthenticationTokenDTO addNewAuthenticationToken(NewAuthenticationTokenDTO newAuthenticationTokenDTO, boolean appManaged);

    abstract Optional<AuthenticationTokenDTO> getAuthenticationTokenByName(String name);

    abstract List<AuthenticationTokenDTO> getAllAuthenticationToken();

    abstract void deleteToken(String id);

    abstract Optional<AuthenticationTokenDTO> getAuthenticationTokenById(String id);

    abstract boolean existsAuthenticationTokenByEmail(String email);

    abstract Optional<AuthenticationTokenDTO> getAuthenticationTokenByEmail(String email);

    abstract void deleteAllAuthenticationTokenWithEmailEndWith(String emailPostfix);


    /**
     * Check if the email ends with the ELOG application fake domain without the logname
     *
     * @param email is the email to check
     * @return true is the email belong to autogenerated application token email
     */
    public boolean isAppTokenEmail(String email) {
        if (email == null) return false;
        return email.endsWith(appProperties.getApplicationTokenDomain());
    }

    public boolean isAppLogbookTokenEmail(String email) {
        final Pattern pattern = Pattern.compile(appProperties.getLogbookEmailRegex(), Pattern.MULTILINE);
        final Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }
}
